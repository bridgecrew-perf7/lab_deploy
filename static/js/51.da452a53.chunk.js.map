{"version":3,"sources":["threejs/BasicScene.js","views/threejs/DefaultCanvas.js"],"names":["BasicScene","props","scene","THREE","background","renderer","camera","controls","OrbitControls","domElement","ref","useRef","useEffect","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","current","clientWidth","clientHeight","setSize","appendChild","gridHelper","add","window","addEventListener","e","updateProjectionMatrix","ambientLight","sun","setRotationFromEuler","createBox","animate","requestAnimationFrame","update","render","position","width","height","depth","color","geometry","material","mesh","copy","className","DefaultCanvas"],"mappings":"iKAkIeA,EAtHI,SAACC,GAWhB,IAAMC,EAAQ,IAAIC,IAClBD,EAAME,WAAa,IAAID,IAAY,UAEnC,IAAME,EAAW,IAAIF,IACfG,EAAS,IAAIH,IAAwB,GAAI,IAAK,IAAM,KAEpDI,EAAW,IAAIC,IAAcF,EAAQD,EAASI,YAE9CC,EAAMC,mBAEZC,qBAAU,WACN,GAAKV,EAAL,CAEAK,EAASM,eAAgB,EACzBN,EAASO,cAAgB,IAEzBP,EAASQ,oBAAqB,EAE9BR,EAASS,YAAc,IACvBT,EAASU,YAAc,IAEvBV,EAASW,cAAgBC,KAAKC,GAAK,EAEpBV,EAAIW,QAAQC,YAAcZ,EAAIW,QAAQE,aAErDlB,EAASmB,QAAQd,EAAIW,QAAQC,YAAaZ,EAAIW,QAAQE,cACtDb,EAAIW,QAAQI,YAAYpB,EAASI,YAOjC,IAAMiB,EAAa,IAAIvB,IAAiB,IAAK,KAC7CD,EAAMyB,IAAID,GAEVE,OAAOC,iBAAiB,UAAU,SAACC,GAC/BzB,EAASmB,QAAQd,EAAIW,QAAQC,YAAaZ,EAAIW,QAAQE,cACtDjB,EAAOyB,4BAGX,IAAIC,EAAe,IAAI7B,IAAmB,QAAU,IAChD8B,EAAM,IAAI9B,IAAuB,SAAU,GAC/CD,EAAMyB,IAAIK,GACV9B,EAAMyB,IAAIM,GAEVA,EAAIC,qBAAqB,IAAI/B,IAAY,IAAK,IAAK,MAEnDgC,EAAU,IAAIhC,IAAc,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,WAElDiC,OACD,CAAC,CAAElC,IAEN,IAAMkC,EAAU,SAAVA,IACG/B,IAELgC,sBAAsBD,GACtB7B,EAAS+B,SACTjC,EAASkC,OAAOrC,EAAOI,KAGrB6B,EAAY,SAACK,EAAUC,EAAOC,EAAQC,EAAOC,GAC/C,IAAIC,EAAW,IAAI1C,IAAkBsC,EAAOC,EAAQC,GAChDG,EAAW,IAAI3C,IAA2B,CAAEyC,MAAOA,IACnDG,EAAO,IAAI5C,IAAW0C,EAAUC,GAIpC,OAHA5C,EAAMyB,IAAIoB,GACVA,EAAKP,SAASQ,KAAKR,GAEZO,GAkCX,OACI,qBAAKE,UAAU,iBAAiBvC,IAAKA,KC7G9BwC,UAZO,SAACjD,GAOnB,OACI,cAAC,EAAD","file":"static/js/51.da452a53.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\n// import { useDispatch, useSelector } from 'react-redux'\r\n// import { ActionCrane } from '../redux/actions/crane'\r\n// import { CSpinner } from '@coreui/react'\r\n// import CIcon from '@coreui/icons-react'\r\n\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\n// import Loading from './Loading'\r\n// import { Vector3, Color } from 'three';\r\n\r\nconst BasicScene = (props) => {\r\n    // const [scene, setScene] = useState(null);\r\n    // const [renderer, setRenderer] = useState(null);\r\n    // const [camera, setCamera] = useState(null);\r\n    // const dispatch = useDispatch();\r\n    // const player = useSelector(state => state.crane.player);\r\n    // const idToken = useSelector(state => state.auth.idToken);\r\n    // const isLoadingCanvas = useSelector(state => state.crane.isLoadingCanvas);\r\n    // const isLoadingElement = useSelector(state => state.crane.isLoadingElement);\r\n    // const isLoadingPost = useSelector(state => state.crane.isLoadingPost);\r\n    // const overLapMode = useSelector(state => state.crane.overLapMode);\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xffffff);\r\n\r\n    const renderer = new THREE.WebGLRenderer();\r\n    const camera = new THREE.PerspectiveCamera(60, 1.6, 0.01, 1000);\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!scene) return;\r\n\r\n        controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\r\n        controls.dampingFactor = 0.05;\r\n\r\n        controls.screenSpacePanning = false;\r\n\r\n        controls.minDistance = 100;\r\n        controls.maxDistance = 500;\r\n\r\n        controls.maxPolarAngle = Math.PI / 2;\r\n\r\n        const aspect = ref.current.clientWidth / ref.current.clientHeight;\r\n\r\n        renderer.setSize(ref.current.clientWidth, ref.current.clientHeight);\r\n        ref.current.appendChild(renderer.domElement);\r\n\r\n        // const camera = new THREE.OrthographicCamera(-50 * aspect, 50 * aspect, -50, 50, 0.01, 1000);\r\n\r\n        // scene.add(camera);\r\n        // setCamera(camera);\r\n\r\n        const gridHelper = new THREE.GridHelper(100, 100);\r\n        scene.add(gridHelper);\r\n\r\n        window.addEventListener('resize', (e) => {\r\n            renderer.setSize(ref.current.clientWidth, ref.current.clientHeight);\r\n            camera.updateProjectionMatrix();\r\n        });\r\n\r\n        var ambientLight = new THREE.AmbientLight(0x404040, 0.4)\r\n        var sun = new THREE.DirectionalLight(0xffffff, 1)\r\n        scene.add(ambientLight);\r\n        scene.add(sun);\r\n\r\n        sun.setRotationFromEuler(new THREE.Euler(1.5, 1.5, 1.5))\r\n\r\n        createBox(new THREE.Vector3(0, 0, 0), 10, 10, 10, '#d20000')\r\n\r\n        animate();\r\n    }, [, scene]);\r\n\r\n    const animate = () => {\r\n        if (!renderer) return;\r\n\r\n        requestAnimationFrame(animate);\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    const createBox = (position, width, height, depth, color) => {\r\n        var geometry = new THREE.BoxGeometry(width, height, depth);\r\n        var material = new THREE.MeshStandardMaterial({ color: color });\r\n        var mesh = new THREE.Mesh(geometry, material);\r\n        scene.add(mesh);\r\n        mesh.position.copy(position);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    // const createCircle = (position, radius, color) => {\r\n    //     var sun = new THREE.DirectionalLight({ color: '#ffffff' })\r\n    //     scene.add(sun);\r\n\r\n    //     var geometry = new THREE.SphereGeometry(radius);\r\n    //     var material = new THREE.MeshStandardMaterial({ color: color });\r\n    //     var circle = new THREE.Mesh(geometry, material);\r\n    //     scene.add(circle);\r\n    //     circle.position.copy(position);\r\n\r\n    //     console.log(1);\r\n    //     return circle;\r\n    // }\r\n\r\n    // renderer.setSize( window.innerWidth, window.innerHeight );\r\n    // document.body.appendChild( renderer.domElement );\r\n\r\n\r\n    // useEffect(() => {\r\n    //     let id = 'viewer';\r\n    //     dom = document.getElementById(id) ?? document.createElement('div')\r\n    //     dom.id = id;\r\n\r\n    //     ref.current.appendChild(dom);\r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     if (!player && idToken)\r\n    //         dispatch(ActionCrane.init(ref));\r\n    // }, []);\r\n\r\n    return (\r\n        <div className='canvas_wrapper' ref={ref} />\r\n    )\r\n}\r\n\r\nexport default BasicScene;\r\n//React.memo(BasicScene, (prevProps, nextProps) => prevProps.type === nextProps.type)","import React from 'react'\r\nimport BasicScene from '../../threejs/BasicScene';\r\n// import { CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\r\n// import CIcon from '@coreui/icons-react'\r\n\r\nconst DefaultCanvas = (props) => {\r\n    // const domRef = useRef();\r\n    //   const user = usersData.find( user => user.id.toString() === match.params.id)\r\n    //   const userDetails = user ? Object.entries(user) : \r\n    //     [['id', (<span><CIcon className=\"text-muted\" name=\"cui-icon-ban\" /> Not found</span>)]]\r\n    //\r\n\r\n    return (\r\n        <BasicScene />\r\n    )\r\n}\r\n\r\nexport default DefaultCanvas\r\n"],"sourceRoot":""}